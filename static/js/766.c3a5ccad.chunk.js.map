{"version":3,"file":"static/js/766.c3a5ccad.chunk.js","mappings":"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","sources":["components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.jsx","components/Movies/Movies.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport poster from '../../assets/poster.jpg';\nimport './MovieListItem.css';\n\nfunction MovieListItem({ movie, to, from }) {\n  const imgPath = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : poster;\n\n  return (\n    <li className=\"movie-list-item\" key={movie.id}>\n      <Link to={to} state={{ from }}>\n        <p className=\"movie-title\">{movie.title}</p>\n        <img src={imgPath} alt={movie.title} />\n        <p className=\"release-date\"> Release: {movie.release_date}</p>\n      </Link>\n    </li>\n  );\n}\n\nexport default MovieListItem;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\nimport './MoviesList.css';\n\nfunction MovieList({ movies, to, from }) {\n  return (\n    <ul className=\"movie-list\">\n      {movies.map(movie => (\n        <MovieListItem\n          to={`${to}/${movie.id}`}\n          from={from}\n          key={movie.id}\n          movie={movie}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default MovieList;\n","import { useEffect, useState } from 'react';\nimport './SearchBar.css';\nimport { useSearchParams } from 'react-router-dom';\n\nfunction SearchBar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const oldQuery = searchParams.get('query');\n    if (oldQuery) {\n      setQuery(oldQuery);\n    }\n  }, [searchParams]);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (query) {\n      onSubmit(query);\n    }\n  }\n\n  return (\n    <form className=\"search-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={ev => setQuery(ev.target.value)}\n      />\n      <button>&#128269;</button>\n    </form>\n  );\n}\n\nexport default SearchBar;\n","import MovieList from 'components/MovieList/MovieList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nfunction Movies({ moviesData, onSubmit, query }) {\n  return (\n    <main>\n      <SearchBar onSubmit={onSubmit} />\n      {moviesData && (\n        <MovieList\n          movies={moviesData.results}\n          to=\"/movies\"\n          from={`/movies?query=${query}`}\n        />\n      )}\n    </main>\n  );\n}\n\nexport default Movies;\n","import Movies from 'components/Movies/Movies';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'servicies/tmdb-api';\n\nfunction MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [moviesData, setMoviesData] = useState(null);\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    async function fetchData() {\n      setMoviesData(await getMoviesByQuery(query));\n    }\n\n    if (query) {\n      fetchData();\n    }\n  }, [query]);\n\n  return (\n    <Movies\n      query={query}\n      moviesData={moviesData}\n      onSubmit={query => setSearchParams({ query })}\n    />\n  );\n}\n\nexport default MoviesPage;\n"],"names":["_ref","movie","to","from","imgPath","poster_path","concat","poster","_jsx","className","children","_jsxs","Link","state","title","src","alt","release_date","id","movies","map","MovieListItem","onSubmit","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useSearchParams","useSearchParams","searchParams","useEffect","oldQuery","get","event","preventDefault","type","value","onChange","ev","target","moviesData","SearchBar","MovieList","results","_useSearchParams2","setSearchParams","setMoviesData","_fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","t0","getMoviesByQuery","t1","sent","stop","apply","arguments","fetchData","Movies"],"sourceRoot":""}